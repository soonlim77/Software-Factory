using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using JustInTimeShippingWeb.Models;
using JustInTimeShippingCore;

namespace JustInTimeShippingWeb.Controllers
{
    public class KioskController : Controller
    {
        //
        // GET: /Kiosk/
        private void PopulateDropDowns(CreateShippingRequestViewModel request)//, string packageType = "B", string letterType = "Plain", string deliveryType = "G")
        {
            request.PackageTypes = new List<SelectListItem>();
            request.PackageTypes.Add(new SelectListItem() { Text = "Box", Value = "B", Selected = true });
            request.PackageTypes.Add(new SelectListItem() { Text = "Letter", Value = "L", Selected = false });

            request.LetterTypes = new List<SelectListItem>();
            request.LetterTypes.Add(new SelectListItem() { Text = "Plain", Value = "Plain", Selected = true });
            request.LetterTypes.Add(new SelectListItem() { Text = "Fire Proof", Value = "FireProof", Selected = false });
            request.LetterTypes.Add(new SelectListItem() { Text = "Weather Proof", Value = "WeatherProof", Selected = false });

            request.DeliveryTypes = new List<SelectListItem>();
            request.DeliveryTypes.Add(new SelectListItem() { Text = "Air", Value = "A", Selected = true });
            request.DeliveryTypes.Add(new SelectListItem() { Text = "Ground", Value = "G", Selected = false });
            request.DeliveryTypes.Add(new SelectListItem() { Text = "Rail", Value = "R", Selected = false });
        }

        public ActionResult Default()
        {
            return RedirectToAction("Main");
        }

        public ActionResult Main(string packageType, string deliveryType, string message = "")
        {
            var request = new CreateShippingRequestViewModel();

            PopulateDropDowns(request);//, packageType: packageType, deliveryType: deliveryType);

            // If you want to push a message to the user
            request.Message = message;

            request.Id = 0;

            // If you want to provide defaulted values
            request.IsInsured = true;
            request.Height = 0;
            request.Width = 0;
            request.Depth = 0;

            request.OName = "Name...";
            request.OStreet = "Stree...";
            request.OCity = "City...";
            request.OState = "State...";
            request.OPostalCode = "Postal Code...";

            request.DName = "Name...";
            request.DStreet = "Street...";
            request.DCity = "City...";
            request.DState = "State...";
            request.DPostalCode = "Postal Code...";

            return View(request);
        }

        public ActionResult Submit(CreateShippingRequestViewModel request, string packageType, string deliveryType)
        {
            bool success = false;

            if (!success)
            {
                PopulateDropDowns(request);

                request.Message = "Something failed...?";

                return View("Main", request);
            }
            else
            {
                ShippingConfirmation newModel = new ShippingConfirmation();
                // Should map all the previous values here...
                newModel.Id = request.Id;
                newModel.PackageType = request.PackageType;
                newModel.LetterType = request.LetterType;
                newModel.DeliveryType = request.DeliveryType;
                newModel.IsInsured = request.IsInsured;
                newModel.Height = request.Height;
                newModel.Width = request.Width;
                newModel.Depth = request.Depth;
                newModel.OName = request.OName;
                newModel.OStreet = request.OStreet;
                newModel.OCity = request.OCity;
                newModel.OState = request.OState;
                newModel.OPostalCode = request.OPostalCode;
                newModel.DName = request.DName;
                newModel.DStreet = request.DStreet;
                newModel.DCity = request.DCity;
                newModel.DState = request.DState;
                newModel.DPostalCode = request.DPostalCode;

                // Should set actual calculated values here...
                newModel.PackageWeight = 0.0;
                newModel.DeliveryTime = 3.5;
                newModel.ShippingCost = 4.5;
                newModel.DeliveryStatus = "Unknown";

                return View("Review", newModel);
            }
        }

        public ActionResult DeliveryConfirmed(ShippingConfirmation model)
        {
            // Process delivery and send the package

            return View("Confirmation", model);
        }

        public ActionResult CancelDelivery(ShippingConfirmation model)
        {
            return View();
        }
    }
}
